# This file has been automatically generated by pkg_builder

from openalea.core import *

__name__ = 'mesh'
__version__ = '1.0.0'
__license__ = 'CeCILL-C'
__author__ = None
__institutes__ = None
__description__ = ''
__url__ = 'http://openalea.gforge.inria.fr'

__editable__ = 'True'
__icon__ = ''
__alias__ = []

__all__ = []


point_mesh = Factory(name='point_mesh',
                description='Convert a point dict into a displayable mesh',
                category='image',
                nodemodule='openalea.mesh.triangular_mesh',
                nodeclass='point_triangular_mesh',
                inputs=[dict(interface="IDict",name='point_positions',value=None), 
                        dict(interface="IDict",name='point_data',value=None)],
                outputs=[dict(interface=None,name='point_triangular_mesh')],
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append("point_mesh")


topomesh_triangular_mesh = Factory(name='topomesh_triangular_mesh',
                description='''Convert a PropertyTopomesh into a displayable mesh''',
                category='image',
                nodemodule='openalea.mesh.triangular_mesh',
                nodeclass='topomesh_to_triangular_mesh',
                inputs=[dict(interface=None,name='topomesh',value=None), 
                        dict(interface='IInt',name='degree',value=3), 
                        dict(interface='IFloat',name='coef',value=1.0), 
                        dict(interface='ITuple',name='mesh_center',value=(0.0,0.0,0.0)), 
                        dict(interface='IBool',name='epidermis',value=False),
                        dict(interface='IStr',name='property_name',value=None,hide=True), 
                        dict(interface='IInt',name='property_degree',value=None,hide=True), ],
                outputs=[dict(interface=None,name='topomesh_triangular_mesh'),
                         dict(interface=None,name='triangle_topomesh_cells',hide=True),
                         dict(interface=None,name='triangle_topomesh_triangles',hide=True),],
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append("topomesh_triangular_mesh")
    

cell_vertex_extraction = Factory(name='cell_vertex_extraction',
                description= '''Extract the cell vertices from a labelled segmented image_cell_vertex

                                    Identifies in the image the voxels for which 4 labels or more are represented in the 26-neighborhood and returns a dictionnary with the cells 4-uples as keys and the (average) position of the cell vertices as values
                                ''',
                category='image',
                nodemodule='openalea.mesh.utils.tissue_analysis_tools',
                nodeclass='cell_vertex_extraction',
                inputs=[dict(interface=None,name='segmented_image',value=None),],
                outputs=[dict(interface="IDict",name='image_cell_vertex',value=None),],
                widgetmodule=None,
                widgetclass=None,
               )
__all__.append("cell_vertex_extraction")
